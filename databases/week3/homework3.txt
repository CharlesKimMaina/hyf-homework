Use mealsharing;

CREATE TABLE `meal` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY
  `title` VARCHAR(45) NOT NULL,
  `description` VARCHAR(45) NOT NULL,
  `location` VARCHAR(45) NULL,
  `when` DATETIME NOT NULL,
  `Max_reservation` INT NOT NULL,
  `price` DECIMAL(10,2) NOT NULL,
  `created_date` DATE NOT NULL 
)ENGINE = InnoDB DEFAULT CHARSET = utf8b4 COLLATE = utf8mb4_unicode_ci;



CREATE TABLE `reservation` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY,
  `number_of_guests` INT(10) NOT NULL,
  `meal_id` INT NOT NULL,
  `created_date` DATE NOT NULL,
CONSTRAINT `fk_reservation` FOREIGN KEY (`meal_id`) REFERENCES `meal`(`id`) ON DELETE CASCADE ON UPDATE CASCADE
  )ENGINE = InnoDB DEFAULT CHARSET = utf8b4 COLLATE = utf8mb4_unicode_ci;

CREATE TABLE `review` (
  `id` INT(10) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  `title` VARCHAR(45) NOT NULL,
  `desciption` TEXT NULL default NULL,
  `meal_id` INT(10) unsigned NOT NULL,
  `stars` INT(10) unsigned NOT NULL,
  `created_date` DATE NOT NULL,
  )CONSTRAINT `fk_reservation` FOREIGN KEY (`meal_id`) REFERENCES `meal`(`id`) ON DELETE CASCADE ON UPDATE CASCADE
  )ENGINE = InnoDB DEFAULT CHARSET = utf8b4 COLLATE = utf8mb4_unicode_ci;



-- know all meal columns
DESCRIBE meal;

-- know all reservation columns
DESCRIBE reservation;

-- know all review columns
DESCRIBE review;



-- get all meals
SELECT *
FROM meal;

-- Add a new meal
INSERT INTO meal (`title`, `description`, `location`, `when`,
 `Max_reservation`, `price`, `created_date`)
VALUES ('chickmasala', 'chicken with masala n chips', 'copenhagen', 
'2020-06-06 11:00:00', 85, 110, '2020-06-06');

-- get a meal with specific id.
SELECT *
FROM meal
WHERE id = 1; 

-- update a specific meal
UPDATE meal
SET title = 'barflychickie'
WHERE id = 1;

-- delete a specific meal
DELETE FROM meal
WHERE id = 2;

-- get all reservations
SELECT * FROM reservation;

-- add a new reservation
INSERT INTO reservation (`id`, `number_of_guests`, `meal_id`, `created_date`)
VALUES (937, 100, 28, '2020-06-05');

-- get a specific reservation
SELECT *
FROM reservation
WHERE id = 8;

-- update a specific reservation
UPDATE reservation
SET id = 456
WHERE id = 1;


-- delete a specific reservation
DELETE FROM reservation
WHERE id = 3;

-- get all reviews 
SELECT * FROM review;

-- add a new review
INSERT INTO review (`id`, `title`, `description`, `meal_id`, `stars`, `created_date`)
VALUES (678, 'toprank', 'best_services_offered', 569, 5, '2020-06-05');

-- get a review with specific id.
SELECT *
FROM review
WHERE id = 18;

-- update a specific review
UPDATE review
SET id = 876
WHERE id = 123;

-- delete a specific review
DELETE FROM review
WHERE id = 123;

-- get meal that has their price less than 90
 SELECT *
 FROM meal
 WHERE price < 90
 ORDER by title;

-- get all meals that have available reservations 
 SELECT meal.title, meal.max_reservation, reservation.number_of_guests
 FROM meal
 INNER JOIN reservation
 ON meal.id = reservation.meal_id
 WHERE meal.max_reservation > reservation.number_of_guests;

-- select meal title that partially matches rød, grøn med fløde  
 SELECT title
 FROM meal
 WHERE title REGEXP 'rød|grøn|med|fløde';

-- get meals that have been created between two dates
  SELECT * 
FROM meal 
WHERE created_date > '2011-06-06' and created_date < '2020-06-06'
order by created_date;




SELECT *
 FROM meal
 WHERE created_date BETWEEN '2020-05-08' AND '2020-05-09';


-- get only specific number of meal, example with price less than 100
 SELECT *
 FROM meal
 WHERE price < 100
 LIMIT 5;

-- get all meals with good reviews
 
SELECT meal.title , review.stars 
FROM meal
JOIN review ON (review.meal_id = meal.id )
where stars >= 3;


-- get reservation for a specific meal sorted by created_date
 
SELECT meal.title ,reservation.id ,reservation.created_date 
FROM reservation
JOIN meal ON (meal.id = reservation.meal_id)
WHERE meal.id = 77
ORDER BY reservation.created_date;



SELECT meal.id, meal.title, AVG(review.stars)
FROM meal
INNER JOIN review
ON meal.id = review.meal_id
GROUP BY meal.id, meal.title
ORDER BY AVG(review.stars);
